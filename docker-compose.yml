services:
  postgres:
    image: pgvector/pgvector:pg15
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-kcs}
      POSTGRES_USER: ${POSTGRES_USER:-kcs}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-kcs_dev_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_EXTERNAL_PORT:-5432}:5432"
    volumes:
      - ${POSTGRES_DATA_DIR:-./data/postgres}:/var/lib/postgresql/data
      - ${POSTGRES_LOG_DIR:-./data/logs/postgres}:/var/log/postgresql
      - ./src/sql/migrations:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-kcs} -d ${POSTGRES_DB:-kcs}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kcs-network
    deploy:
      resources:
        limits:
          memory: ${POSTGRES_MEMORY_LIMIT:-2g}
          cpus: "${POSTGRES_CPU_LIMIT:-2.0}"

  redis:
    image: redis:7-alpine
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "${REDIS_EXTERNAL_PORT:-6379}:6379"
    volumes:
      - ${REDIS_DATA_DIR:-./data/redis}:/data
      - ${REDIS_LOG_DIR:-./data/logs/redis}:/var/log/redis
    command: >
      redis-server
      --appendonly yes
      ${REDIS_PASSWORD:+--requirepass ${REDIS_PASSWORD}}
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli ${REDIS_PASSWORD:+-a $$REDIS_PASSWORD} ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - kcs-network
    deploy:
      resources:
        limits:
          memory: ${REDIS_MEMORY_LIMIT:-512m}
          cpus: "${REDIS_CPU_LIMIT:-1.0}"

  kcs-mcp:
    build:
      context: .
      dockerfile: Dockerfile.mcp
    ports:
      - "${KCS_EXTERNAL_PORT:-8080}:${KCS_PORT:-8080}"
    environment:
      # Database configuration
      DATABASE_URL: ${DATABASE_URL:-postgresql://${POSTGRES_USER:-kcs}:${POSTGRES_PASSWORD:-kcs_dev_password}@postgres:5432/${POSTGRES_DB:-kcs}}

      # Redis configuration
      REDIS_URL: ${REDIS_URL:-redis://${REDIS_HOST:-redis}:${REDIS_PORT:-6379}/${REDIS_DB:-0}}

      # Server configuration
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret_change_in_production}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      KCS_HOST: ${KCS_HOST:-0.0.0.0}
      KCS_PORT: ${KCS_PORT:-8080}

      # Performance settings
      KCS_WORKERS: ${KCS_WORKERS:-4}
      KCS_MAX_CONNECTIONS: ${KCS_MAX_CONNECTIONS:-100}
      KCS_REQUEST_TIMEOUT: ${KCS_REQUEST_TIMEOUT:-30}

      # Indexing configuration
      KCS_KERNEL_PATH: ${KCS_KERNEL_PATH:-/usr/src/linux}
      KCS_DEFAULT_CONFIG: ${KCS_DEFAULT_CONFIG:-x86_64:defconfig}
      KCS_MAX_INDEX_TIME: ${KCS_MAX_INDEX_TIME:-1200}
      KCS_MAX_INCREMENTAL_TIME: ${KCS_MAX_INCREMENTAL_TIME:-180}

      # Database pool settings
      DB_POOL_SIZE: ${DB_POOL_SIZE:-20}
      DB_POOL_MAX_OVERFLOW: ${DB_POOL_MAX_OVERFLOW:-30}
      DB_POOL_TIMEOUT: ${DB_POOL_TIMEOUT:-30}

      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-false}

      # Optional integrations
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
    volumes:
      - ${KCS_INDEX_DATA_DIR:-./data/kcs-index}:/app/data
      - ${KCS_CACHE_DIR:-./data/cache}:/app/cache
      - ${KCS_LOG_DIR:-./data/logs}:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - kcs-network
    profiles:
      - app
    deploy:
      resources:
        limits:
          memory: ${KCS_MEMORY_LIMIT:-1g}
          cpus: "${KCS_CPU_LIMIT:-2.0}"

  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_EXTERNAL_PORT:-3000}:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin_change_in_production}
    volumes:
      - ${GRAFANA_DATA_DIR:-./data/grafana}:/var/lib/grafana
      - ./tools/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./tools/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - kcs-network
    profiles:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_EXTERNAL_PORT:-9090}:9090"
    volumes:
      - ./tools/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ${PROMETHEUS_DATA_DIR:-./data/prometheus}:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION_TIME:-200h}'
      - '--web.enable-lifecycle'
    networks:
      - kcs-network
    profiles:
      - monitoring

networks:
  kcs-network:
    driver: bridge
